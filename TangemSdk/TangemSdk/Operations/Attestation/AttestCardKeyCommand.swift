//
//  AttestCardKeyCommand.swift
//  TangemSdk
//
//  Created by Alexander Osokin on 07.08.2020.
//  Copyright Â© 2020 Tangem AG. All rights reserved.
//

import Foundation

/// Deserialized response from the Tangem card after `AttestCardKeyCommand`.
@available(iOS 13.0, *)
public struct AttestCardKeyResponse: JSONStringConvertible {
    /// Unique Tangem card ID number
    public let cardId: String
    /// Random salt generated by the card
    public let salt: Data
    /// Hashed concatenated Challenge and Salt: SHA256(Challenge | Salt) signed with Card_PrivateKey
    public let cardSignature: Data
    /// Random challenge generated by host application
    public let challenge: Data
    
    public func verify(with cardPublicKey: Data) -> Bool? {
        return CryptoUtils.verify(curve: .secp256k1,
                                  publicKey: cardPublicKey,
                                  message: challenge + salt,
                                  signature: cardSignature)
        
    }
}

@available(iOS 13.0, *)
public class AttestCardKeyCommand: Command {
    private var challenge: Data?

    /// Default initializer
    /// - Parameters:
    ///   - challenge: Optional challenge. If nil, it will be created automatically and returned in command response
    public init(challenge: Data? = nil) {
        self.challenge = challenge
    }
    
    deinit {
        Log.debug("AttestCardKeyCommand deinit")
    }
    
    public func run(in session: CardSession, completion: @escaping CompletionResult<AttestCardKeyResponse>) {
        if challenge == nil {
            do {
                challenge = try CryptoUtils.generateRandomBytes(count: 16)
            } catch {
                completion(.failure(error.toTangemSdkError()))
            }
        }
        
        guard let cardPublicKey = session.environment.card?.cardPublicKey else {
            completion(.failure(.missingPreflightRead))
            return
        }
        
        transceive(in: session) { result in
            switch result {
            case .success(let response):
                guard let verified = response.verify(with: cardPublicKey) else {
                    completion(.failure(.cryptoUtilsError))
                    return
                }
                
                if !verified {
                    completion(.failure(.cardVerificationFailed))
                    return
                }
                
                completion(.success(response))
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    func serialize(with environment: SessionEnvironment) throws -> CommandApdu {
        let tlvBuilder = try createTlvBuilder(legacyMode: environment.legacyMode)
            .append(.pin, value: environment.accessCode.value)
            .append(.cardId, value: environment.card?.cardId)
            .append(.challenge, value: challenge)
        
        return CommandApdu(.attestCardKey, tlv: tlvBuilder.serialize())
    }
    
    func deserialize(with environment: SessionEnvironment, from apdu: ResponseApdu) throws -> AttestCardKeyResponse {
        guard let tlv = apdu.getTlvData(encryptionKey: environment.encryptionKey) else {
            throw TangemSdkError.deserializeApduFailed
        }
        
        let decoder = TlvDecoder(tlv: tlv)
        return AttestCardKeyResponse(
            cardId: try decoder.decode(.cardId),
            salt: try decoder.decode(.salt),
            cardSignature: try decoder.decode(.cardSignature),
            challenge: self.challenge!)
    }
}
