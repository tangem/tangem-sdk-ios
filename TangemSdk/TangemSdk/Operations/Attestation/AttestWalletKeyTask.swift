//
//  AttestWalletKeyTask.swift
//  TangemSdk
//
//  Created by [REDACTED_AUTHOR]
//  Copyright Â© 2019 Tangem AG. All rights reserved.
//

import Foundation

/// Deserialized response from the Tangem card after `AttestWalletKeyTask`.
public struct AttestWalletKeyResponse: JSONStringConvertible {
    /// Unique Tangem card ID number
    public let cardId: String
    /// Random salt generated by the card.
    public let salt: Data
    /// `Challenge` and `salt` signed with the wallet private key.
    public let walletSignature: Data
    /// Challenge, used to check wallet
    public let challenge: Data
    /// Confirmation signature of the wallet ownership.  COS: 2.01+.  And a wallet's status for COS: 6.16+.
    /// - `ConfirmationMode.none` :  No signature will be returned.
    /// - `ConfirmationMode.static` :  Wallet's public key and wallet's status (COS 6.16+) signed with the card's private key.
    /// - `ConfirmationMode.dynamic`: Wallet's public key,  wallet's status (COS 6.16+), `challenge`, and `publicKeySalt`, signed with the card's private key.
    public let cardSignature: Data?
    /// Optional random salt, generated by the card for  `dynamic` `confirmationMode`.  COS: 2.01+.
    public let publicKeySalt: Data?
    /// Status of the wallet. COS v.6.16+
    public let walletStatus: Card.Wallet.Status?
    /// Counter of `AttestWalletKey` command executions. A very big value of this counter may indicate a hacking attempts.  COS: 2.01+.
    let counter: Int?
}

/// This task proves that the wallet private key from the card corresponds to the wallet public key.  Standard challenge/response scheme is used
public final class AttestWalletKeyTask: Command {
    private var challenge: Data!
    private let walletPublicKey: Data
    private let derivationPath: DerivationPath?
    private let confirmationMode: ConfirmationMode
    
    /// Default initializer
    /// - Parameters:
    ///   - publicKey: Public key of the wallet to check
    ///   - derivationPath: DerivationPath of the wallet. Optional. COS v. 4.28 and higher,
    ///   - challenge: Optional challenge. If nil, it will be created automatically and returned in command response
    ///   - confirmationMode: Additional confirmation of the wallet ownership.  The card will return the `cardSignature` (a wallet's public key signed by the card's private key)  in response.  COS: 2.01+.
    public init(
        walletPublicKey: Data,
        derivationPath: DerivationPath? = nil,
        challenge: Data? = nil,
        confirmationMode: ConfirmationMode = .dynamic
    ) {
        self.walletPublicKey = walletPublicKey
        self.derivationPath = derivationPath
        self.challenge = challenge
        self.confirmationMode = confirmationMode
    }
    
    deinit {
        Log.debug("AttestWalletKeyTask deinit")
    }

    func performPreCheck(_ card: Card) -> TangemSdkError? {
        guard let wallet = card.wallets[walletPublicKey] else {
            return .walletNotFound
        }

        if derivationPath != nil {
            if card.firmwareVersion < .hdWalletAvailable {
                return .notSupportedFirmwareVersion
            }

            guard wallet.curve.supportsDerivation else {
                return .unsupportedCurve
            }

            if !card.settings.isHDWalletAllowed {
                return .hdWalletDisabled
            }
        }

        return nil
    }

    public func run(in session: CardSession, completion: @escaping CompletionResult<AttestWalletKeyResponse>) {
        if challenge == nil {
            do {
                challenge = try CryptoUtils.generateRandomBytes(count: 16)
            } catch {
                completion(.failure(error.toTangemSdkError()))
            }
        }
        
        if let derivationPath {
            let derivationCommand = DeriveWalletPublicKeyTask(walletPublicKey: walletPublicKey, derivationPath: derivationPath)
            derivationCommand.run(in: session) { result in
                switch result {
                case .success:
                    self.transceiveAttestation(in: session, completion: completion)
                case .failure(let error):
                    completion(.failure(error.toTangemSdkError()))
                }
            }
        } else {
            transceiveAttestation(in: session, completion: completion)
        }
    }
    
    
    func transceiveAttestation(in session: CardSession, completion: @escaping CompletionResult<AttestWalletKeyResponse>) {
        transceive(in: session) { result in
            switch result {
            case .success(let checkWalletResponse):
                guard let card = session.environment.card,
                      let wallet = card.wallets[self.walletPublicKey] else {
                    completion(.failure(.cardError))
                    return
                }
                
                do {
                    let isWalletSignatureValid = try self.verifyWalletSignature(response: checkWalletResponse, wallet: wallet)
                    let isCardSignatureValid = try self.verifyCardSignature(response: checkWalletResponse,
                                                                            cardPublicKey: card.cardPublicKey)
                    if isWalletSignatureValid && isCardSignatureValid {
                        completion(.success(checkWalletResponse))
                    } else {
                        completion(.failure(.cardVerificationFailed))
                    }
                } catch {
                    completion(.failure(error.toTangemSdkError()))
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    func serialize(with environment: SessionEnvironment) throws -> CommandApdu {
        guard let card = environment.card else {
            throw TangemSdkError.missingPreflightRead
        }
        
        guard let walletIndex = card.wallets[walletPublicKey]?.index else {
            throw TangemSdkError.walletNotFound
        }
        
        let tlvBuilder = try createTlvBuilder(legacyMode: environment.legacyMode)
            .appendPinIfNeeded(.pin, value: environment.accessCode, card: environment.card)
            .append(.cardId, value: card.cardId)
            .append(.challenge, value: challenge)
            .append(.walletIndex, value: walletIndex)
        
        //Otherwise, static confirmation will fail with the "invalidParams" error.
        if card.firmwareVersion >= .walletOwnershipConfirmationAvailable {
            switch confirmationMode {
            case .none:
                break
            case .static:
                try tlvBuilder.append(.publicKeyChallenge, value: Data())
            case .dynamic:
                try tlvBuilder.append(.publicKeyChallenge, value: challenge)
            }
        }
        
        if let derivationPath {
            try tlvBuilder.append(.walletHDPath, value: derivationPath)
        }
        
        return CommandApdu(.attestWalletKey, tlv: tlvBuilder.serialize())
    }
    
    func deserialize(with environment: SessionEnvironment, from apdu: ResponseApdu) throws -> AttestWalletKeyResponse {
        guard let tlv = apdu.getTlvData(encryptionKey: environment.encryptionKey) else {
            throw TangemSdkError.deserializeApduFailed
        }
        
        let decoder = TlvDecoder(tlv: tlv)
        return AttestWalletKeyResponse(
            cardId: try decoder.decode(.cardId),
            salt: try decoder.decode(.salt),
            walletSignature: try decoder.decode(.walletSignature),
            challenge: self.challenge,
            cardSignature: try decoder.decode(.cardSignature),
            publicKeySalt: try decoder.decode(.publicKeySalt),
            walletStatus: try decoder.decode(.status),
            counter: try decoder.decode(.checkWalletCounter)
        )
    }
    
    private func verifyWalletSignature(response: AttestWalletKeyResponse, wallet: Card.Wallet) throws -> Bool {
        guard wallet.publicKey == walletPublicKey else {
            return false
        }
        
        let publicKey: Data
        if let derivationPath {
            guard let derivedKey = wallet.derivedKeys[derivationPath] else {
                throw TangemSdkError.walletNotFound
            }
            
            publicKey = derivedKey.publicKey
        } else {
            publicKey = wallet.publicKey
        }

        return try CryptoUtils.verify(
            curve: wallet.curve,
            publicKey: publicKey,
            message: challenge + response.salt,
            signature: response.walletSignature
        )
    }

    private func verifyCardSignature(response: AttestWalletKeyResponse, cardPublicKey: Data) throws -> Bool {
        guard let cardSignature = response.cardSignature else {
            return true
        }

        var message = walletPublicKey

        // Dynamic verification
        if let publicKeySalt = response.publicKeySalt {
            message += challenge + publicKeySalt
        }

        if let walletStatus = response.walletStatus {
            message += walletStatus.rawValue.byte
        }

        return try CryptoUtils.verify(
            curve: .secp256k1,
            publicKey: cardPublicKey,
            message: message,
            signature: cardSignature
        )
    }
}

public extension AttestWalletKeyTask {
    enum ConfirmationMode {
        case none
        case `static`
        case dynamic
    }
}
